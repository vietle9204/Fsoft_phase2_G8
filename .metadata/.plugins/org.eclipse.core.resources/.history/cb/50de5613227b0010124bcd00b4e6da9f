/* ###################################################################
**     Filename    : main.c
**     Processor   : S32K1xx
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.00
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including necessary module. Cpu.h contains other modules needed for compiling.*/
#include "Cpu.h"

  volatile int exit_code = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */









  /*
   * @brief : Initialize clocks, pins and power modes
   */
  void BoardInit(void) {

  	/* Initialize and configure clocks
  	 *  -   Setup system clocks, dividers
  	 *  -   Configure FlexCAN clock, GPIO
  	 *  -   see clock manager component for more details
  	 */
  	CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
  			g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
  	CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_FORCIBLE);

  	/* Initialize pins
  	 *  -   Init FlexCAN and GPIO pins
  	 *  -   See PinSettings component for more info
  	 */
  	PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);
  }


  void FTM1_IC_Init(ftm_state_t *state)
  {
	  FTM_DRV_Init(INST_FLEXTIMER_IC1, &flexTimer_ic1_InitConfig, state);
	  FTM_DRV_InitInputCapture(INST_FLEXTIMER_IC1, &flexTimer_ic1_InputCaptureConfig);


  }

  void FT2_IC_Init(void)
  {
	  FTM_DRV_Init(INST_FLEXTIMER_IC2, &flexTimer_ic2_InitConfig, &ftm2StateStruct);
	  FTM_DRV_InitInputCapture(INST_FLEXTIMER_IC2, &flexTimer_ic2_InputCaptureConfig);

  }



  void PORTA_IRQHandler(void)
  {
      uint32_t flags = PINS_DRV_GetPortIntFlag(PORTA);

      // PA14
      if (flags & (1 << 14)) {
          // Xử lý ngắt từ PA14
      	PINS_DRV_SetPins(PTA, 1 << 15U);
      	delayCycles(4800);
      	PINS_DRV_ClearPins(PTA, 1 << 15U);

      	Motor_Stop(Left_motor);
          // clear interrupt flag
          PINS_DRV_ClearPinIntFlagCmd(PORTA, 14);
      }



      // PA16
      if (flags & (1 << 16)) {
          // Xử lý ngắt từ PA16
      	PINS_DRV_SetPins(PTA, 1 << 17U);
      	delayCycles(4800);
      	PINS_DRV_ClearPins(PTA, 1 << 17U);

      	Motor_Stop(Left_motor);

      	// clear interrupt flag
          PINS_DRV_ClearPinIntFlagCmd(PORTA, 16);
      }


  }

/*! 
  \brief The main function for the project.
  \details The startup initialization sequence is the following:
 * - startup asm routine
 * - main()
*/
int main(void)
{
  /* Write your local variable definition here */

    ftm_state_t ftm1StateStruct;
    ftm_state_t ftm2StateStruct;

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;) {
    if(exit_code != 0) {
      break;
    }
  }
  return exit_code;
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP S32K series of microcontrollers.
**
** ###################################################################
*/
