/* ###################################################################
**     Filename    : main.c
**     Processor   : S32K1xx
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.00
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including necessary module. Cpu.h contains other modules needed for compiling.*/
#include "Cpu.h"

  volatile int exit_code = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */

#define measurement_Interval 1000

typedef enum{
	BRAKE_WAIT_RESPONSE = 0x00,

	Brake_SUCCESSFUL = 0x01,

	BRAKE_FAULT_COMM = 0x02,			 // LIN communication error
	BRAKE_FAULT_SIGNAL = 0x03,			 // brake signal error: lost, signal interference
	BRAKE_FAULT_ACTUATOR = 0x04,         // Braking successful but engine speed not reduced

}Brake_State;




	uint8_t l_BrakeState = BRAKE_WAIT_RESPONSE;
	uint8_t r_BrakeState = BRAKE_WAIT_RESPONSE;

	float l_rps = 0;
	int   l_measurement_done =  0;

	float r_rps = 0;
	int   r_measurement_done =  0;


  /*
   * @brief : Initialize clocks, pins and power modes
   */
  void BoardInit(void) {

  	/* Initialize and configure clocks
  	 *  -   Setup system clocks, dividers
  	 *  -   Configure FlexCAN clock, GPIO
  	 *  -   see clock manager component for more details
  	 */
  	CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
  			g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
  	CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_FORCIBLE);

  	/* Initialize pins
  	 *  -   Init FlexCAN and GPIO pins
  	 *  -   See PinSettings component for more info
  	 */
  	PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);
  }


  void FTM1_IC_Init(ftm_state_t *state)
  {
	  FTM_DRV_Init(INST_FLEXTIMER_IC1, &flexTimer_ic1_InitConfig, state);
	  FTM_DRV_InitInputCapture(INST_FLEXTIMER_IC1, &flexTimer_ic1_InputCaptureConfig);
	  FTM_DRV_StartNewSignalMeasurement(INST_FLEXTIMER_IC1, 0U);


  }

  void FTM2_IC_Init(ftm_state_t *state)
  {
	  FTM_DRV_Init(INST_FLEXTIMER_IC2, &flexTimer_ic2_InitConfig, state);
	  FTM_DRV_InitInputCapture(INST_FLEXTIMER_IC2, &flexTimer_ic2_InputCaptureConfig);
	  FTM_DRV_StartNewSignalMeasurement(INST_FLEXTIMER_IC2, 0U);

  }


  /* Callbacks declaration */
  extern void Measurement_IC1_Done(ic_event_t event, void *userData)
  {
  	(void) userData;
  	if(event ==  IC_EVENT_MEASUREMENT_COMPLETE)
  	{
  		l_measurement_done = 1;
  	}

  }

  int IC2_done = 0;
  /* Callbacks declaration */
  extern void Measurement_IC2_Done(ic_event_t event, void *userData)
  {
  	(void) userData;
  	if(event ==  IC_EVENT_MEASUREMENT_COMPLETE)
  	{
  		r_measurement_done = 1;
  	}

  }


  void PORTA_IRQHandler(void)
  {
      uint32_t flags = PINS_DRV_GetPortIntFlag(PORTA) & ((1 << 15U) | (1 << 17U));

      // PA14
      if (flags & (1 << 15)) {
          // Xử lý ngắt từ PA15
    	  if(l_BrakeState == BRAKE_WAIT_RESPONSE)
    		  l_BrakeState = Brake_SUCCESSFUL;
          // clear interrupt flag
          PINS_DRV_ClearPinIntFlagCmd(PORTA, 15);
      }



      // PA16
      if (flags & (1 << 17)) {
          // Xử lý ngắt từ PA17
    	  if(r_BrakeState == BRAKE_WAIT_RESPONSE)
    	      r_BrakeState = Brake_SUCCESSFUL;

      	// clear interrupt flag
          PINS_DRV_ClearPinIntFlagCmd(PORTA, 17);
      }


  }


  void PORTC_IRQHandler(void) {
	uint32_t flags = PINS_DRV_GetPortIntFlag(PORTC) & (0xFU << 14);

	// PC14
	if (flags & (1 << 14)) {
		// Xử lý ngắt từ PC14

		PINS_DRV_ClearPinIntFlagCmd(PORTC, 14);
	}

	// PC15
	if (flags & (1 << 15)) {
		// Xử lý ngắt từ PC15

		PINS_DRV_ClearPinIntFlagCmd(PORTC, 15);
	}

	// PC16
	if (flags & (1 << 16)) {
		// Xử lý ngắt từ PC16

		PINS_DRV_ClearPinIntFlagCmd(PORTC, 16);
	}

	// PC17
	if (flags & (1 << 17)) {
		// Xử lý ngắt từ PC17

		PINS_DRV_ClearPinIntFlagCmd(PORTC, 17);
	}

}


  /*
   * Initialize interrupt
   * install interrupt handler
   * manager priority
   */
	void InterruptInit(void) {
		/*Can    */


		/*Lin	   */


		/* enable interrupt port A and init handler */
		INT_SYS_InstallHandler(PORTA_IRQn, &PORTA_IRQHandler, NULL);
		INT_SYS_SetPriority(PORTA_IRQn, 2);
		INT_SYS_EnableIRQ(PORTA_IRQn);

		/* enable interrupt port C and init handler */
		INT_SYS_InstallHandler(PORTA_IRQn, &PORTC_IRQHandler, NULL);
		INT_SYS_SetPriority(PORTC_IRQn, 3);
		INT_SYS_EnableIRQ(PORTC_IRQn);

		/* FTM1_IC priority */
		INT_SYS_DisableIRQ(FTM1_Ch0_Ch1_IRQn);
		INT_SYS_SetPriority(FTM1_Ch0_Ch1_IRQn, 4);
		INT_SYS_EnableIRQ(FTM1_Ch0_Ch1_IRQn);

		/* FTM2_IC priority */
		INT_SYS_DisableIRQ(FTM2_Ch0_Ch1_IRQn);
		INT_SYS_SetPriority(FTM2_Ch0_Ch1_IRQn, 5);
		INT_SYS_EnableIRQ(FTM2_Ch0_Ch1_IRQn);

	}


	void Can_CommandHandler(uint8_t command, uint16_t data)
	{

	}
/*! 
  \brief The main function for the project.
  \details The startup initialization sequence is the following:
 * - startup asm routine
 * - main()
*/
int main(void)
{
  /* Write your local variable definition here */

    ftm_state_t ftm1StateStruct;
    ftm_state_t ftm2StateStruct;

    uint32_t measurement_start = OSIF_GetMilliseconds();

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */

    BoardInit();

    FTM1_IC_Init(&ftm1StateStruct);

    FTM2_IC_Init(&ftm2StateStruct);

    InterruptInit();


  /* For example: for(;;) { } */


	while (1) {
		/* read the speed of left motor and right motor every 1 second */
		if (OSIF_GetMilliseconds() >= measurement_start + measurement_Interval) {
			// read the speed of left motor
			if (l_measurement_done) {
				uint16_t l_pulseCount = FTM_DRV_GetInputCaptureMeasurement(INST_FLEXTIMER_IC1, 0U);
				l_rps = 3125.0 / l_pulseCount; //  1/(l_pulseCount*20.0/62500.0);
			} else {
				l_rps = 0.00;
			}

			// read the speed of right motor
			if (r_measurement_done) {
				uint16_t r_pulseCount = FTM_DRV_GetInputCaptureMeasurement(INST_FLEXTIMER_IC2, 0U);
				r_rps = 3125.0 / r_pulseCount; //  1/(r_pulseCount*20.0/62500.0);
			} else {
				r_rps = 0.00;
			}

		   //reset , continuos measurement
		   l_measurement_done = 0;
		   r_measurement_done = 0;
		   FTM_DRV_StartNewSignalMeasurement(INST_FLEXTIMER_IC1, 0U);
		   FTM_DRV_StartNewSignalMeasurement(INST_FLEXTIMER_IC2, 0U);
		   measurement_start = OSIF_GetMilliseconds(); // reset start time
		}
	}


  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;) {
    if(exit_code != 0) {
      break;
    }
  }
  return exit_code;
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP S32K series of microcontrollers.
**
** ###################################################################
*/
