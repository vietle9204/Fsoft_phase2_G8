/* ###################################################################
**     Filename    : main.c
**     Processor   : S32K1xx
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.00
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including necessary module. Cpu.h contains other modules needed for compiling.*/
#include "Cpu.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"

  volatile int exit_code = 0;

/* User includes (#include below this line is not maintained by Processor Expert) */




  /* Receive buffer size */
	#define RX_BUFFER_SIZE 64

  /* Buffer used to receive data from the console */
	uint8_t rxByte;
	uint8_t rxBuffer[RX_BUFFER_SIZE];
	volatile uint8_t rxIndex = 0;


  /*
   * @brief : Initialize clocks, pins and power modes
   */
  void BoardInit(void)
  {

      /* Initialize and configure clocks
       *  -   Setup system clocks, dividers
       *  -   Configure FlexCAN clock, GPIO
       *  -   see clock manager component for more details
       */
      CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
                          g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
      CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_FORCIBLE);

      /* Initialize pins
       *  -   Init FlexCAN and GPIO pins
       *  -   See PinSettings component for more info
       */
      PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);
  }


  /* UART rx callback for continuous reception, byte by byte */
void RxCallback(void *driverState, uart_event_t event, void *userData) {
	(void) driverState;
	(void) userData;


	if (event == UART_EVENT_RX_FULL) {
		// Store into Bufer

		rxBuffer[rxIndex++] = rxByte;
		// if received '\n'
		if (rxByte == '\n') {
			rxBuffer[rxIndex] = '\0'; // end string
			rxIndex = 0; // reset

			// handle messenger

			if (strcmp((char*) rxBuffer, "HELLO") == 0) {
				uint8_t str[16] = "hi\n";
				LPUART_DRV_SendData(INST_LPUART1, str, 3);
			} else {
				LPUART_DRV_SendData(INST_LPUART1, rxBuffer,
						strlen((char*) rxBuffer));
			}

		}

	}
	LPUART_DRV_SetRxBuffer(INST_LPUART1, &rxByte, 1);
}

  /*
   *
   */
  void LpuartInit(void)
  {

	  /* Initialize LPUART instance */
	   LPUART_DRV_Init(INST_LPUART1, &lpuart1_State, &lpuart1_InitConfig0);
	   /* Install the callback for rx events */
	   LPUART_DRV_InstallRxCallback(INST_LPUART1, RxCallback, NULL);
	   /*Start receive uart data */
	   LPUART_DRV_ReceiveData(INST_LPUART1, &rxByte, 1);
  }



/*! 
  \brief The main function for the project.
  \details The startup initialization sequence is the following:
 * - startup asm routine
 * - main()
*/
int main(void)
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */

    BoardInit();
    LpuartInit();



  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;) {
    if(exit_code != 0) {
      break;
    }
  }
  return exit_code;
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP S32K series of microcontrollers.
**
** ###################################################################
*/
